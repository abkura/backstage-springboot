apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
metadata:
  name: springboot-template
  title: Spring Boot Template
  description: Create a microservice using Spring Boot
  tags:
    - java
spec:
  owner: service@example.com
  type: service

  parameters:
    - title: Provide project setup information
      required:
        - component_id
        - owner
        - java_package_name
      properties:
        component_id:
          title: Name
          type: string
          description: Unique name of the component. eg(petstore-api)
          ui:field: EntityNamePicker
        java_package_name:
          title: Java Package Name
          type: string
          description: Name for the java package. eg (petstore)
        description:
          title: Description
          type: string
          description: Help others understand what this application is for.
        owner:
          title: Owner
          type: string
          description: Owner of the component
          ui:field: OwnerPicker
          ui:options:
            allowedKinds:
              - Group
        entity:
          title: Entity
          type: string
          description: Owner of the component
          ui:field: EntityPicker    
    - title: Choose a location
      required:
        - repoUrl
      properties:
        repoUrl:
          title: Repository Location
          type: string
          ui:field: RepoUrlPicker
          ui:options:
            allowedHosts:
              - gitlab.com

  steps:
    - id: template
      name: Fetch Skeleton + Template
      action: fetch:template
      input:
        url: ./skeleton	
        values:
          component_id: ${{ parameters.component_id }}
          description: ${{ parameters.description }}
          artifact_id: ${{ parameters.component_id }}
          java_package_name: ${{ parameters.java_package_name }}
          owner: ${{ parameters.owner }}
          destination: ${{ parameters.repoUrl | parseRepoUrl }}
          http_port: 8080
    
    - id: check_gitlab_group
      name: Check Gitlab Group
      action: http:backstage:request
      input:
        method: 'GET'
        path: '/api/proxy/gitlab/groups?search=estes-express/app-dev/${{ (parameters.repoUrl | parseRepoUrl).owner }}'
        
    - id: create_gitlab_group
      name: Create Gitlab Group
      if: ${{ steps.check_gitlab_group.output.body.length == 0 }}
      action: http:backstage:request
      input:
       method: 'POST'
       path: '/api/proxy/gitlab/groups?parent_id=4709263'
       headers:
         content-type: 'application/json'
       body:
         name: ${{ (parameters.repoUrl | parseRepoUrl).owner }}
         path: ${{ (parameters.repoUrl | parseRepoUrl).owner }}

    - id: publish
      name: Publish
      action: publish:gitlab
      input:
        allowedHosts: ["gitlab.com"]
        description: This is ${{ parameters.component_id }}
        repoUrl: ${{ 'gitlab.com?owner=estes-express/app-dev/'+ (parameters.repoUrl | parseRepoUrl).owner + '&repo=' + (parameters.repoUrl | parseRepoUrl).repo}}

    - id: register
      name: Register
      action: catalog:register
      input:
        repoContentsUrl: ${{ steps.publish.output.repoContentsUrl }}
        catalogInfoPath: "/catalog-info.yaml"

  output:
    links:
      - title: Repository
        url: ${{ steps.publish.output.remoteUrl }}
      - title: Open in catalog
        icon: catalog
        entityRef: ${{ steps.register.output.entityRef }}
